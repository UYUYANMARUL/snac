fn main(x: u8) {
    assert(x > 1);
}

// [4, 107, 18, 244, 87, 255, 137, 224, 227, 96, 186, 155, 155, 74, 92, 85, 225, 206, 139, 80, 234, 147, 250, 145, 194, 208, 245, 63, 94, 214, 72, 197, 111,
//\" 22, 119, 227, 50, 139, 173, 197, 128, 65, 117, 157, 241, 18, 250, 64, 210, 227, 140, 194, 71, 138, 52, 190, 11, 88, 230, 173, 15, 23, 153, 192, 169]

#[test]
fn test_main() {

let public_key_x: [u8; 32] = [
    99, 27, 151, 79, 254, 164, 41, 141,
    149, 189, 209, 200, 85, 186, 208, 62,
    115, 21, 196, 55, 202, 114, 175, 65,
    15, 149, 227, 206, 209, 201, 56, 223
];

let public_key_y: [u8; 32] = [
    86, 252, 103, 95, 152, 106, 98, 235,
    62, 154, 231, 252, 118, 76, 102, 67,
    89, 247, 26, 194, 208, 72, 79, 70,
    228, 20, 30, 177, 190, 197, 237, 12
];
    let message_hash: [u8; 32] = [159, 134, 208, 129, 136, 76, 125, 101, 154, 47, 234, 160, 197, 90, 208, 21, 163, 191, 79, 27, 43, 11, 130, 44, 209, 93, 108, 21, 176, 240, 
10, 8];

    // 3. ECDSA signature over secp256k1
    let signature: [u8; 64] = [13, 193, 56, 29, 20, 157, 16, 121, 64, 167, 144, 22, 39, 127, 78, 92, 38, 245, 206, 117, 111, 51, 224, 70, 148, 202, 1, 24, 72, 120, 43, 90
, 23, 247, 114, 59, 173, 108, 201, 252, 253, 154, 203, 65, 105, 158, 181, 234, 59, 53, 207, 40, 53, 9, 28, 187, 163, 161, 97, 121, 68, 217, 
217, 167];

    // 4. Verify
    let is_valid = std::ecdsa_secp256k1::verify_signature(
        public_key_x,
        public_key_y,
        signature,
        message_hash
    );

    assert(is_valid);  // should pass
}

